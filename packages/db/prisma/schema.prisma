// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  PREMIUM
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  role          UserRole        @default(USER)
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  playgrounds   Playground[]
  startmark     StarMark[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Template {
  REACT
  NEXT
  EXPRESS
  ANGULAR
  VUE
  HONO
}

model Playground {
  id          String     @id @default(cuid())
  title       String
  description String
  template    Template   @default(REACT)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  starmark    StarMark[]
  user        User       @relation(fields: [userId], references: [id])
}

model StarMark {
  id           String   @id @default(cuid())
  userId       String
  playgroundId String
  isMarked     Boolean
  createdAt    DateTime  @default(now())

  playground Playground @relation(fields: [playgroundId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  @@unique([userId, playgroundId]) // Establishing many to many Relationship
}

enum Category {
  frontend
  backend
  fullstack
}

model Templates {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  color       String
  popularity  Float  @default(0)
  ratingCount BigInt @default(0)
  tags        String[]
  features    String[]
  category    Category
}
